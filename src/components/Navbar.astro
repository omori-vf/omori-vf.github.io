---
import NavItem from "./NavItem.astro";
import { t } from "i18next";
import Frame from "./Frame.astro";

const navItems = [
  { title: "nav.home", link: "/" },
  { title: "nav.installation", link: "/installation" },
  { title: "nav.translation", link: "/translation" },
  { title: "nav.team", link: "/team" },
  { title: "nav.faq", link: "/faq" },
];
---

<nav>
  <input class="checkbox" type="checkbox" name="" id="" />
  <div class="hamburger-lines">
    <span class="line line1"></span>
    <span class="line line2"></span>
    <span class="line line3"></span>
  </div>
  <img class="logo" src="/img/logo.webp" alt="OMORI Version FranÃ§aise" />
  <button id="light" class="light-button">
    <img class="lightbulb" src="/img/lightbulb.webp" alt="Lightbulb" />
  </button>

  <div id="menu-items" class="menu-container">
    <Frame>
      <ul>
        {
          navItems.map((v) => (
            <NavItem class="nav-item" title={t(v.title)} link={v.link} />
          ))
        }
      </ul>
    </Frame>
  </div>
</nav>

<style>
  nav {
    width: 100%;
    max-width: var(--content-max-width);
    position: relative;
    display: grid;
    grid-template: auto auto / 1fr auto 1fr;
    justify-content: center;
  }

  .menu-container {
    position: absolute;
    grid-column: 1/4;
    top: 100%;
    z-index: 10;
    width: 100%;
  }

  .menu-container > div {
    width: 100%;
  }

  .checkbox,
  .hamburger-lines {
    grid-row: 1/2;
    grid-column: 1/2;
    height: 30px;
    width: 30px;
    margin: var(--spacing-s);
    align-self: center;
  }

  .checkbox {
    z-index: 5;
    opacity: 0;
    cursor: pointer;
    padding: 0;
    border: none;
  }

  .hamburger-lines {
    z-index: 2;
    display: flex;
    flex-direction: column;
    justify-content: space-around;
  }

  .hamburger-lines .line {
    display: block;
    height: 2px;
    width: 100%;
    background: var(--white);
  }

  .hamburger-lines .line1 {
    transform-origin: 0% 0%;
    transition: transform 0.4s ease-in-out, background 1s ease;
  }

  .hamburger-lines .line2 {
    transition: transform 0.2s ease-in-out, background 1s ease;
  }

  .hamburger-lines .line3 {
    transform-origin: 0% 100%;
    transition: transform 0.4s ease-in-out, background 1s ease;
  }

  input[type="checkbox"]:checked ~ .hamburger-lines .line1 {
    transform: rotate(45deg);
  }

  input[type="checkbox"]:checked ~ .hamburger-lines .line2 {
    transform: scaleY(0);
  }

  input[type="checkbox"]:checked ~ .hamburger-lines .line3 {
    transform: rotate(-45deg);
  }

  input[type="checkbox"]:not(:checked) ~ .menu-container {
    display: none;
  }

  ul {
    display: flex;
    flex-direction: column;
    width: 100%;
    padding: 0;
    margin: 0;
    justify-content: space-around;
  }

  .nav-item + .nav-item {
    margin-top: var(--spacing-s);
  }

  @media screen and (min-width: 420px) {
    .menu-container {
      position: unset;
    }
    #menu-items {
      display: flex;
    }

    ul {
      flex-direction: row;
    }

    .checkbox,
    .hamburger-lines {
      display: none;
    }

    .nav-item + .nav-item {
      margin-top: 0;
    }
  }

  .logo {
    grid-column: 2 / 3;
    height: 50px;
    filter: invert(85%);
    margin: var(--spacing-xs) 0;
    justify-self: center;
    transition: filter 1s ease;
  }

  .light-button {
    justify-self: flex-end;
    margin-right: var(--spacing-s);
    padding: 0;
    background: unset;
    border: none;
    height: min-content;
  }

  .lightbulb {
    height: 50px;
    filter: invert(85%);
    transition: filter 1s ease;
  }

  @media screen and (min-width: 420px) {
    .logo {
      height: 100px;
      margin: var(--spacing-m) 0;
    }

    .lightbulb {
      height: 80px;
    }

    .light-button {
      margin-right: var(--spacing-l);
    }
  }
</style>

<style is:inline>
  .light-theme .logo {
    filter: invert(15%);
  }

  .light-theme .lightbulb {
    filter: unset;
  }

  .light-theme .hamburger-lines .line {
    background: var(--black);
  }
</style>

<script>
  const lightModeCss = "light-theme";
  const lightModeStateKey = "light";

  const setLightMode = () => {
    document.documentElement.classList.add(lightModeCss);
    window.localStorage.setItem(lightModeStateKey, "true");
  };

  const setDarkMode = () => {
    document.documentElement.classList.remove(lightModeCss);
    window.localStorage.setItem(lightModeStateKey, "false");
  };

  const button = document.getElementById("light") as HTMLButtonElement;
  button.addEventListener("click", () => {
    if (document.documentElement.classList.contains(lightModeCss)) {
      setDarkMode();
    } else {
      setLightMode();
    }
  });
</script>
